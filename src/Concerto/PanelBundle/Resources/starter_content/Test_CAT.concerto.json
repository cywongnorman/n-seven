{
    "version": "5.0.beta.7.1",
    "collection": [
        {
            "class_name": "Test",
            "id": 7,
            "name": "source_CAT",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "library(catR)\n\nif(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\nif(is.null(test_time_limit_offset) || is.na(test_time_limit_offset)) { test_time_limit_offset = 0 }\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    a_column = ib$custom_table$columns$a\n    b_column = ib$custom_table$columns$b\n    c_column = ib$custom_table$columns$c\n    d_column = ib$custom_table$columns$d\n    correct_column = ib$custom_table$columns$correct\n    data_set_id_column = ib$custom_table$columns$data_set_id\n    cb_group_column = ib$custom_table$columns$cb_group\n    fixed_index_column = ib$custom_table$columns$fixed_index\n    questions = concerto.table.query(\"\nSELECT \nid, \n{{question_column}} AS question, \n{{response_options_column}} AS response_options,\n{{a_column}} AS a,\n{{b_column}} AS b,\n{{c_column}} AS c,\n{{d_column}} AS d,\n{{correct_column}} AS correct,\n{{cb_group_column}} AS cb_group,\n{{fixed_index_column}} AS fixed_index\nFROM {{table}} \nWHERE {{data_set_id_column}} = '{{data_set_id}}'\n\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      a_column=a_column,\n      b_column=b_column,\n      c_column=c_column,\n      d_column=d_column,\n      correct_column=correct_column,\n      cb_group_column=cb_group_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id)),\n  \t  fixed_index_column=fixed_index_column\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\ngetContent = function(question) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = c()\n\n  if(length(o) > 0) {\n    if(randomize_response_options == \"1\") {\n      options = o[sample(1:length(o))]\n    } else {\n      options = o\n    }\n  }\n  question$response_options = options;\n  question$correct = NULL\n  \n  params = list(\n    paragraph = paragraph,\n    question = question,\n    response_styles = paste0(\"width: \",response_width)\n  )\n  content = concerto.template.join(templateId=CAT_template,params=params)\n\n  return(list(content=content,params=params))\n}\n\nshouldStop = function(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time) {\n  #run out of test time\n  if(test_time_limited && test_time_left <= 0) { return(3) }\n  if(timeout_when_not_full_item_time && test_time_limited && item_time_limited && test_time_left < item_time_limit) { return(3) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(1) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(2) }\n  return(0)\n}\n\n#returns response insert id\nsaveResponse = function(response, question, rb, theta, sem, correct) {\n  if(is.null(rb$table_type)) {\n    return(NULL)\n  }\n\n  table = \"default_cat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  data_set_id_column = \"data_set_id\"\n  data_set_id = rb$data_set_id\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    theta_column = rb$custom_table$columns$theta\n    sem_column = rb$custom_table$columns$sem\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{theta_column}}, {{sem_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, {{theta}}, {{sem}}, '{{data_set_id}}')\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    correct_column=correct_column,\n    correct=correct,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n  ))\n  return(concerto.table.lastInsertId())\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  \n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(list(content=content,params=params))\n}\n\nupdateSavedState = function(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$CAT)) {\n    concerto$promoted$.savedState$CAT <<- list()\n  }\n\n  concerto$promoted$.savedState$CAT$questions <<- questions\n  concerto$promoted$.savedState$CAT$theta <<- theta\n  concerto$promoted$.savedState$CAT$sem <<- sem\n  concerto$promoted$.savedState$CAT$out <<- out\n  concerto$promoted$.savedState$CAT$test_time_left <<- test_time_left\n  concerto$promoted$.savedState$CAT$item_time_left <<- item_time_left\n  concerto$promoted$.savedState$CAT$time_taken <<- time_taken\n  concerto$promoted$.savedState$CAT$correctness <<- correctness\n  concerto$promoted$.savedState$CAT$current_item <<- current_item\n}\n\ngetNextItemIndex = function(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions) {\n  current_index = length(out) + 1\n  questions_num = dim(questions)[1]\n  if(questions_num > 0) {\n    for(i in 1:questions_num) {\n      fixed_index = questions[i,\"fixed_index\"]\n      if(!is.na(fixed_index) && !is.null(fixed_index) && fixed_index != \"\"){\n        if(fixed_index == current_index) {\n          return(i)\n        } else {\n          out = unique(c(out, i))\n        }\n      }\n    }\n  }\n  return(nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item)\n}\n\nsr_time = fromJSON(stopping_time)\ntest_time_limited = F\ntest_time_limit = 0\ntest_time_left = 0\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"both\") && as.numeric(sr_time$test_time_limit) > 0) {\n  test_time_limited = T\n  test_time_limit = as.numeric(sr_time$test_time_limit) + as.numeric(test_time_limit_offset)\n  test_time_left = test_time_limit\n}\nitem_time_limited = F\nitem_time_limit = 0\nitem_time_left = 0\ntimeout_when_not_full_item_time = F\nif(!is.null(sr_time$type) && (sr_time$type == \"item\" || sr_time$type == \"both\") && as.numeric(sr_time$item_time_limit) > 0) {\n  item_time_limited = T\n  item_time_limit = as.numeric(sr_time$item_time_limit)\n  item_time_left = item_time_limit\n  timeout_when_not_full_item_time = sr_time$timeout_when_not_full_item_time == \"1\"\n}\n\nresumed = F\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$CAT)) {\n  resumed = T\n\n  questions = concerto$promoted$.savedState$CAT$questions\n  theta = concerto$promoted$.savedState$CAT$theta\n  sem = concerto$promoted$.savedState$CAT$sem\n  out = concerto$promoted$.savedState$CAT$out\n  test_time_left = concerto$promoted$.savedState$CAT$test_time_left\n  item_time_left = concerto$promoted$.savedState$CAT$item_time_left\n  time_taken = concerto$promoted$.savedState$CAT$time_taken\n  correctness = concerto$promoted$.savedState$CAT$correctness\n  current_item = concerto$promoted$.savedState$CAT$current_item\n} else {\n  questions = getQuestions()\n  theta = as.numeric(starting_theta)\n  sem = 1\n  out = NULL\n  correctness = c()\n  current_item = 1\n  time_taken = 0\n}\n\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = questions[,c(\"a\",\"b\",\"c\",\"d\"),drop=F]\nparam_bank = apply(param_bank, 2, as.numeric)\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\nbuttons = \"\"\nif(!is.na(buttons_template) && !is.null(buttons_template) && buttons_template != \"\") {\n  buttons = concerto.template.join(templateId=buttons_template,params=list(label=button_label))\n}\n\nif(item_debug == \"0\" && !resumed && dim(questions)[1] > 1) { \n  #next item processor\n  if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n    current_item = concerto.test.run(next_item_processor, params=list(\n      questions=questions,\n      template_response=response,\n      theta=theta,\n      sem=sem,\n      out=out,\n      next_item_criterion=next_item_criterion,\n      scoring_method=scoring_method,\n      randomesque=randomesque,\n      cb_group=cb_group,\n      cb_control=cb_control\n    ))$next_item\n  } else {\n    current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n  }\n}\n\nwhile(T) {\n  question = as.list(questions[current_item,])\n  content = getContent(question)\n\n  time_limit = 0\n  if(test_time_limited || item_time_limited) {\n    if(test_time_limited) {\n      time_limit = test_time_left\n    }\n    if(item_time_limited && item_time_left < test_time_left) {\n      time_limit = item_time_left\n    }\n  }\n\n  updateSavedState(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken)\n  if(item_debug == \"0\") {\n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    if(!is.null(content_params_processor) && !is.na(content_params_processor) && content_params_processor != \"\") {\n      params = concerto.test.run(content_params_processor, params=list(\n        question=question,\n        params=params\n      ))$params\n    }\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params, timeLimit=time_limit)\n    warning_msg = \"\"\n\n    time_taken = time_taken + as.numeric(response$timeTaken)\n    if(test_time_limited) {\n      test_time_left = test_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") test_time_left = 0\n    }\n    if(item_time_limited) {\n      item_time_left = item_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") item_time_left = 0\n    }\n\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      correct = 0\n      if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      correctness = c(correctness, correct)\n      out = c(out, current_item)\n      param_bank_out = param_bank\n      if(dim(questions)[1] > 1) {\n        param_bank_out = param_bank[out,]\n      }\n      print(\"theta\")\n      print(param_bank_out)\n      theta <- thetaEst(matrix(param_bank_out, ncol=4, byrow=F), correctness, method=scoring_method)\n      print(\"sem\")\n      sem <- semTheta(theta, matrix(param_bank_out, ncol=4, byrow=F), correctness)\n      print(\"response\")\n      response_id=saveResponse(response, question, rb, theta, sem, correct)\n\n      #response processor\n      if(!is.null(response_processor) && !is.na(response_processor) && response_processor != \"\") {\n        concerto.test.run(response_processor, params=list(\n          question=question,\n          template_response=response,\n          response_id=response_id,\n          response_bank=rb,\n          theta=theta,\n          sem=sem,\n          correct=correct,\n          session=session\n        ))\n      }\n\n      stopReason = shouldStop(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time)\n      if(stopReason) {\n        #out of time\n        if(stopReason == 3) {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(item_time_limited) {\n          item_time_left = item_time_limit\n        }\n\n        #next item processor\n        if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n          current_item = concerto.test.run(next_item_processor, params=list(\n            questions=questions,\n            template_response=response,\n            theta=theta,\n            sem=sem,\n            out=out,\n            next_item_criterion=next_item_criterion,\n            scoring_method=scoring_method,\n            randomesque=randomesque,\n            cb_group=cb_group,\n            cb_control=cb_control\n          ))$next_item\n        } else {\n          current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n        }\n\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    \n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params)\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)\nconcerto$promoted$.savedState$CAT <<- NULL\ntime_left = 0\nif(test_time_limited) {\n  time_left = test_time_left\n}",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 73,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 74,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 75,
                    "name": "button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 76,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 77,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 78,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 79,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 80,
                    "name": "stopping_accuracy",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 81,
                    "name": "scoring_method",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 82,
                    "name": "next_item_criterion",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 83,
                    "name": "randomesque",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 84,
                    "name": "randomize_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 85,
                    "name": "no_answer_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 86,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 87,
                    "name": "score",
                    "type": 1,
                    "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 88,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 89,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 90,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 91,
                    "name": "cb",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 92,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 93,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 94,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 95,
                    "name": "response_width",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 96,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 97,
                    "name": "CAT_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 98,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 99,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 100,
                    "name": "response_processor",
                    "type": 0,
                    "description": "<p>A subtest to run to process user response after it has been saved to response table.<\/p>\n\n<pre>\nconcerto.test.run({{response_processor}}, params=list(\n\tquestion={{question}},\n\ttemplate_response={{template_response}},\n\tresponse_bank={{response_bank}},\n\tresponse_id={{response_id}},\n\ttheta={{theta}},\n\tsem={{sem}},\n\tcorrect={{correct}},\n\tsession={{session}}\n))<\/pre>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 101,
                    "name": "time_taken",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 102,
                    "name": "time_left",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 103,
                    "name": "test_time_limit_offset",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 104,
                    "name": "next_item_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 105,
                    "name": "content_params_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 7,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 106,
                    "name": "starting_theta",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 7,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2018-07-04 15:38:52",
            "updatedBy": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "b3d28a61e5ccbff622fabb6355c7c8cb31a70aeb"
        },
        {
            "class_name": "TestWizard",
            "id": 4,
            "name": "CAT",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 8,
                    "title": "Presentation",
                    "description": "<p>CAT presentation options<\/p>\n",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 23,
                            "label": "Paragraph",
                            "description": "<p>CAT page paragraph<\/p>\n",
                            "hideCondition": "",
                            "type": 2,
                            "passableThroughUrl": "0",
                            "value": "<p>Please answer the question below:<\/p>\n",
                            "testVariable": 74,
                            "name": "paragraph",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 2,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "<p>Please answer the question below:<\/p>\n"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 24,
                            "label": "No answer alert",
                            "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "No answer given!",
                            "testVariable": 85,
                            "name": "no_answer_alert",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 3,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "No answer given!"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 25,
                            "label": "Title",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "DEMO TEST",
                            "testVariable": 92,
                            "name": "title",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "DEMO TEST"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 26,
                            "label": "Responses layout",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "vertical",
                            "testVariable": 94,
                            "name": "responses_layout",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 5,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "vertical",
                                        "label": "Vertical",
                                        "order": 1
                                    },
                                    {
                                        "value": "horizontal",
                                        "label": "Horizontal",
                                        "order": 0
                                    }
                                ],
                                "defvalue": "vertical"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 27,
                            "label": "Response width",
                            "description": "<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 95,
                            "name": "response_width",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 6,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 28,
                            "label": "Button label",
                            "description": "<p>CAT page continue button label<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "continue",
                            "testVariable": 75,
                            "name": "button_label",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 10,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "continue"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 29,
                            "label": "CAT template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "CAT_content",
                            "testVariable": 97,
                            "name": "CAT_template",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "CAT_content"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 30,
                            "label": "Item debug template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "test_item_debug",
                            "testVariable": 98,
                            "name": "item_debug_template",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "test_item_debug"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 31,
                            "label": "Buttons template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "buttons_single",
                            "testVariable": 99,
                            "name": "buttons_template",
                            "wizardStep": 8,
                            "stepTitle": "Presentation",
                            "order": 9,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "buttons_single"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 9,
                    "title": "Item bank",
                    "description": "<p>CAT item bank options<\/p>\n",
                    "orderNum": 1,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 32,
                            "label": "Randomize response options order",
                            "description": "<p>Check if you want order of response options to be random<\/p>\n",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 84,
                            "name": "randomize_response_options",
                            "wizardStep": 9,
                            "stepTitle": "Item bank",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "1"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 33,
                            "label": "Item bank",
                            "description": "<p>CAT item bank definition.<\/p>\n\n<p>Leave item response options list empty for open question.<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"\",\"direct_table\":[],\"custom_table\":[],\"data_set_id\":\"\"}",
                            "testVariable": 76,
                            "name": "item_bank",
                            "wizardStep": 9,
                            "stepTitle": "Item bank",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "3",
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "options": [
                                                {
                                                    "value": "direct",
                                                    "label": "direct"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ],
                                            "defvalue": ""
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": "10",
                                        "name": "direct_table",
                                        "label": "Table",
                                        "definition": {
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "element": {
                                                        "type": "0"
                                                    },
                                                    "fields": [
                                                        {
                                                            "type": "0",
                                                            "name": "id",
                                                            "label": "Id",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": "2",
                                                            "name": "question",
                                                            "label": "Question",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": "10",
                                                            "name": "response_options",
                                                            "label": "Response options",
                                                            "definition": {
                                                                "element": {
                                                                    "type": 9,
                                                                    "definition": {
                                                                        "fields": [
                                                                            {
                                                                                "type": "0",
                                                                                "name": "value",
                                                                                "label": "Value",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "2",
                                                                                "name": "label",
                                                                                "label": "Label",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "a",
                                                            "label": "a",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "defvalue": "1.7"
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "b",
                                                            "label": "b",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "c",
                                                            "label": "c",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "defvalue": "0"
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "d",
                                                            "label": "d",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "defvalue": "1"
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "correct",
                                                            "label": "Correct answer",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "cb_group",
                                                            "label": "CB group",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "fixed_index",
                                                            "label": "Fixed index",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "hideCondition": "parent.table_type != \"direct\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "definition": {
                                            "placeholder": 0,
                                            "cols": [
                                                {
                                                    "name": "question",
                                                    "label": "Question",
                                                    "tooltip": "Question column"
                                                },
                                                {
                                                    "name": "response_options",
                                                    "label": "Response options",
                                                    "tooltip": "Response options column"
                                                },
                                                {
                                                    "name": "a",
                                                    "label": "A",
                                                    "tooltip": "a column"
                                                },
                                                {
                                                    "name": "b",
                                                    "label": "B",
                                                    "tooltip": "b column"
                                                },
                                                {
                                                    "name": "c",
                                                    "label": "C",
                                                    "tooltip": "c column"
                                                },
                                                {
                                                    "name": "d",
                                                    "label": "D",
                                                    "tooltip": "d column"
                                                },
                                                {
                                                    "name": "correct",
                                                    "label": "Correct",
                                                    "tooltip": "Correct column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                },
                                                {
                                                    "name": "cb_group",
                                                    "label": "Content balancing group",
                                                    "tooltip": "Content balancing group column"
                                                },
                                                {
                                                    "name": "fixed_index",
                                                    "label": "Fixed index",
                                                    "tooltip": "Fixed index column"
                                                }
                                            ]
                                        },
                                        "order": 3
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0,
                                            "defvalue": ""
                                        },
                                        "hideCondition": "parent.table_type == \"direct\"",
                                        "order": 1
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 10,
                    "title": "CAT options",
                    "description": "<p>CAT options<\/p>\n",
                    "orderNum": 2,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 34,
                            "label": "Next item criterion",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "MFI",
                            "testVariable": 82,
                            "name": "next_item_criterion",
                            "wizardStep": 10,
                            "stepTitle": "CAT options",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "options": [
                                    {
                                        "value": "MFI",
                                        "label": "MFI"
                                    },
                                    {
                                        "value": "bOpt",
                                        "label": "bOpt"
                                    },
                                    {
                                        "value": "random",
                                        "label": "random"
                                    }
                                ],
                                "defvalue": "MFI"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 35,
                            "label": "Next item randomesque",
                            "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 83,
                            "name": "randomesque",
                            "wizardStep": 10,
                            "stepTitle": "CAT options",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "1"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 36,
                            "label": "Scoring method",
                            "description": "<p>Ability estimator<\/p>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "BM",
                            "testVariable": 81,
                            "name": "scoring_method",
                            "wizardStep": 10,
                            "stepTitle": "CAT options",
                            "order": 2,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "options": [
                                    {
                                        "value": "BM",
                                        "label": "BM"
                                    },
                                    {
                                        "value": "ML",
                                        "label": "ML"
                                    },
                                    {
                                        "value": "WL",
                                        "label": "WL"
                                    },
                                    {
                                        "value": "EAP",
                                        "label": "EAP"
                                    }
                                ],
                                "defvalue": "BM"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 37,
                            "label": "Content Balancing",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"props\":[]}",
                            "testVariable": 91,
                            "name": "cb",
                            "wizardStep": 10,
                            "stepTitle": "CAT options",
                            "order": 3,
                            "wizard": 4,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "props",
                                        "label": "Group proportions",
                                        "definition": {
                                            "placeholder": 0,
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": 0,
                                                    "fields": [
                                                        {
                                                            "type": 0,
                                                            "name": "name",
                                                            "label": "Group name",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "prop",
                                                            "label": "Group proportion",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "hideCondition": "parent.enabled == \"0\"",
                                        "order": 1
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 38,
                            "label": "Starting theta",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "0",
                            "testVariable": 106,
                            "name": "starting_theta",
                            "wizardStep": 10,
                            "stepTitle": "CAT options",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "0"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 11,
                    "title": "Stopping rules",
                    "description": "<p>CAT stopping rules<\/p>\n",
                    "orderNum": 3,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 39,
                            "label": "Time-based stopping rule",
                            "description": "<p>Time-based stopping rule that will stop the test when specified amount of seconds will pass<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"type\":\"\",\"test_time_limit\":\"0\",\"item_time_limit\":\"0\",\"timeout_when_not_full_item_time\":\"0\"}",
                            "testVariable": 78,
                            "name": "stopping_time",
                            "wizardStep": 11,
                            "stepTitle": "Stopping rules",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "type",
                                        "label": "Type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "test",
                                                    "label": "Test",
                                                    "order": "0"
                                                },
                                                {
                                                    "value": "item",
                                                    "label": "Item",
                                                    "order": "1"
                                                },
                                                {
                                                    "value": "both",
                                                    "label": "Both test and item",
                                                    "order": 2
                                                }
                                            ]
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": "0",
                                        "name": "test_time_limit",
                                        "label": "Test time limit (seconds)",
                                        "hideCondition": "parent.type != 'test' && parent.type != 'both'",
                                        "definition": {
                                            "placeholder": 0,
                                            "defvalue": "0"
                                        },
                                        "order": 1
                                    },
                                    {
                                        "type": 0,
                                        "name": "item_time_limit",
                                        "label": "Item time limit (seconds)",
                                        "definition": {
                                            "placeholder": 0,
                                            "defvalue": "0"
                                        },
                                        "hideCondition": "parent.type != 'item' && parent.type != 'both'",
                                        "order": 2
                                    },
                                    {
                                        "type": 4,
                                        "name": "timeout_when_not_full_item_time",
                                        "label": "Timeout when test time left is less than item time limit",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.type != 'both'",
                                        "order": 3
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 40,
                            "label": "Item count-based stopping rule",
                            "description": "<p>Item count-based stopping time that will stop the test after specified number of items is answered<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"count\":\"\"}",
                            "testVariable": 79,
                            "name": "stopping_item_count",
                            "wizardStep": 11,
                            "stepTitle": "Stopping rules",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "4",
                                        "name": "enabled",
                                        "label": "Enabled"
                                    },
                                    {
                                        "type": "0",
                                        "name": "count",
                                        "label": "Item count limit",
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 41,
                            "label": "Accuracy-based stopping rule",
                            "description": "<p>Accuracy-based stopping rule that will stop the test when at least certain accuracy is reached<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"accuracy\":\"\"}",
                            "testVariable": 80,
                            "name": "stopping_accuracy",
                            "wizardStep": 11,
                            "stepTitle": "Stopping rules",
                            "order": 2,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "4",
                                        "name": "enabled",
                                        "label": "Enabled"
                                    },
                                    {
                                        "type": "0",
                                        "name": "accuracy",
                                        "label": "Minimum accuracy",
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 12,
                    "title": "Response bank",
                    "description": "<p>CAT response bank options<\/p>\n",
                    "orderNum": 4,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 42,
                            "label": "Response table",
                            "description": "<p>Response bank definition<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"default\",\"custom_table\":[],\"data_set_id\":null}",
                            "testVariable": 77,
                            "name": "response_bank",
                            "wizardStep": 12,
                            "stepTitle": "Response bank",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "3",
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "options": [
                                                {
                                                    "value": "default",
                                                    "label": "default"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ],
                                            "defvalue": "default"
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "definition": {
                                            "placeholder": 0,
                                            "cols": [
                                                {
                                                    "name": "item_id",
                                                    "label": "Item id",
                                                    "tooltip": "Item id column"
                                                },
                                                {
                                                    "name": "response",
                                                    "label": "Response",
                                                    "tooltip": "Response column"
                                                },
                                                {
                                                    "name": "time_taken",
                                                    "label": "Time taken",
                                                    "tooltip": "Time taken column"
                                                },
                                                {
                                                    "name": "session_id",
                                                    "label": "Session id",
                                                    "tooltip": "Session id column"
                                                },
                                                {
                                                    "name": "correct",
                                                    "label": "Correct",
                                                    "tooltip": "Correct column"
                                                },
                                                {
                                                    "name": "theta",
                                                    "label": "Theta",
                                                    "tooltip": "Theta column"
                                                },
                                                {
                                                    "name": "sem",
                                                    "label": "SEM",
                                                    "tooltip": "SEM column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                }
                                            ]
                                        },
                                        "order": 2
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 1
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 13,
                    "title": "Processors",
                    "description": "",
                    "orderNum": 5,
                    "colsNum": 0,
                    "wizard": 4,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 43,
                            "label": "Response processor",
                            "description": "<p>A subtest to run to process user response after it has been saved to response table.<\/p>\n\n<pre>\nconcerto.test.run({{response_processor}}, params=list(\n\tquestion={{question}},\n\ttemplate_response={{template_response}},\n\tresponse_bank={{response_bank}},\n\tresponse_id={{response_id}},\n\ttheta={{theta}},\n\tsem={{sem}},\n\tcorrect={{correct}},\n\tsession={{session}}\n))<\/pre>\n",
                            "hideCondition": "",
                            "type": 8,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 100,
                            "name": "response_processor",
                            "wizardStep": 13,
                            "stepTitle": "Processors",
                            "order": 2,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 44,
                            "label": "Next item processor",
                            "description": "<p>A subtest to run to get next item index.<\/p>\n\n<pre>\nresult = concerto.test.run({{response_processor}}, params=list(\n\tquestions={{questions}},\n\ttemplate_response={{template_response}},\n\ttheta={{theta}},\n\tsem={{sem}},\n\tout={{out}},\n\tnext_item_criterion={{next_item_criterion}},\n\tscoring_method={{scoring_method}},\n\trandomesque={{randomesque}},\n\tcb_group={{cb_group}},\n\tcb_control={{cb_control}}\n))\n\nresult$next_item<\/pre>\n\n<p>Choose none to use default CAT next item algorithm.<\/p>\n\n<p>Needs to return&nbsp;<strong>next_item<\/strong>&nbsp;variable (index of next item in&nbsp;<strong>questions<\/strong>&nbsp;data frame).<\/p>\n",
                            "hideCondition": "",
                            "type": 8,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 104,
                            "name": "next_item_processor",
                            "wizardStep": 13,
                            "stepTitle": "Processors",
                            "order": 0,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 45,
                            "label": "Content params processor",
                            "description": "<p>A subtest to run to append content params.<\/p>\n\n<pre>\nresult = concerto.test.run({{content_params_processor}}, params=list(\n\tquestion={{question}},\n\tparams={{params}}\n))\n\nresult$params<\/pre>\n\n<p>Needs to return <strong>params<\/strong> variable.<\/p>\n",
                            "hideCondition": "",
                            "type": 8,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 105,
                            "name": "content_params_processor",
                            "wizardStep": 13,
                            "stepTitle": "Processors",
                            "order": 1,
                            "wizard": 4,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": ""
                            }
                        }
                    ]
                }
            ],
            "test": 7,
            "testName": "source_CAT",
            "updatedOn": "2018-07-04 15:38:52",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "4dc84dbdd70f96242089171e54c6e77f864c9f5a"
        },
        {
            "class_name": "Test",
            "id": 8,
            "name": "CAT",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 1,
            "code": "library(catR)\n\nif(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\nif(is.null(test_time_limit_offset) || is.na(test_time_limit_offset)) { test_time_limit_offset = 0 }\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    a_column = ib$custom_table$columns$a\n    b_column = ib$custom_table$columns$b\n    c_column = ib$custom_table$columns$c\n    d_column = ib$custom_table$columns$d\n    correct_column = ib$custom_table$columns$correct\n    data_set_id_column = ib$custom_table$columns$data_set_id\n    cb_group_column = ib$custom_table$columns$cb_group\n    fixed_index_column = ib$custom_table$columns$fixed_index\n    questions = concerto.table.query(\"\nSELECT \nid, \n{{question_column}} AS question, \n{{response_options_column}} AS response_options,\n{{a_column}} AS a,\n{{b_column}} AS b,\n{{c_column}} AS c,\n{{d_column}} AS d,\n{{correct_column}} AS correct,\n{{cb_group_column}} AS cb_group,\n{{fixed_index_column}} AS fixed_index\nFROM {{table}} \nWHERE {{data_set_id_column}} = '{{data_set_id}}'\n\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      a_column=a_column,\n      b_column=b_column,\n      c_column=c_column,\n      d_column=d_column,\n      correct_column=correct_column,\n      cb_group_column=cb_group_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id)),\n  \t  fixed_index_column=fixed_index_column\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\ngetContent = function(question) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = c()\n\n  if(length(o) > 0) {\n    if(randomize_response_options == \"1\") {\n      options = o[sample(1:length(o))]\n    } else {\n      options = o\n    }\n  }\n  question$response_options = options;\n  question$correct = NULL\n  \n  params = list(\n    paragraph = paragraph,\n    question = question,\n    response_styles = paste0(\"width: \",response_width)\n  )\n  content = concerto.template.join(templateId=CAT_template,params=params)\n\n  return(list(content=content,params=params))\n}\n\nshouldStop = function(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time) {\n  #run out of test time\n  if(test_time_limited && test_time_left <= 0) { return(3) }\n  if(timeout_when_not_full_item_time && test_time_limited && item_time_limited && test_time_left < item_time_limit) { return(3) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(1) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(2) }\n  return(0)\n}\n\n#returns response insert id\nsaveResponse = function(response, question, rb, theta, sem, correct) {\n  if(is.null(rb$table_type)) {\n    return(NULL)\n  }\n\n  table = \"default_cat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  data_set_id_column = \"data_set_id\"\n  data_set_id = rb$data_set_id\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    theta_column = rb$custom_table$columns$theta\n    sem_column = rb$custom_table$columns$sem\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{theta_column}}, {{sem_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, {{theta}}, {{sem}}, '{{data_set_id}}')\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    correct_column=correct_column,\n    correct=correct,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n  ))\n  return(concerto.table.lastInsertId())\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  \n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(list(content=content,params=params))\n}\n\nupdateSavedState = function(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$CAT)) {\n    concerto$promoted$.savedState$CAT <<- list()\n  }\n\n  concerto$promoted$.savedState$CAT$questions <<- questions\n  concerto$promoted$.savedState$CAT$theta <<- theta\n  concerto$promoted$.savedState$CAT$sem <<- sem\n  concerto$promoted$.savedState$CAT$out <<- out\n  concerto$promoted$.savedState$CAT$test_time_left <<- test_time_left\n  concerto$promoted$.savedState$CAT$item_time_left <<- item_time_left\n  concerto$promoted$.savedState$CAT$time_taken <<- time_taken\n  concerto$promoted$.savedState$CAT$correctness <<- correctness\n  concerto$promoted$.savedState$CAT$current_item <<- current_item\n}\n\ngetNextItemIndex = function(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions) {\n  current_index = length(out) + 1\n  questions_num = dim(questions)[1]\n  if(questions_num > 0) {\n    for(i in 1:questions_num) {\n      fixed_index = questions[i,\"fixed_index\"]\n      if(!is.na(fixed_index) && !is.null(fixed_index) && fixed_index != \"\"){\n        if(fixed_index == current_index) {\n          return(i)\n        } else {\n          out = unique(c(out, i))\n        }\n      }\n    }\n  }\n  return(nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item)\n}\n\nsr_time = fromJSON(stopping_time)\ntest_time_limited = F\ntest_time_limit = 0\ntest_time_left = 0\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"both\") && as.numeric(sr_time$test_time_limit) > 0) {\n  test_time_limited = T\n  test_time_limit = as.numeric(sr_time$test_time_limit) + as.numeric(test_time_limit_offset)\n  test_time_left = test_time_limit\n}\nitem_time_limited = F\nitem_time_limit = 0\nitem_time_left = 0\ntimeout_when_not_full_item_time = F\nif(!is.null(sr_time$type) && (sr_time$type == \"item\" || sr_time$type == \"both\") && as.numeric(sr_time$item_time_limit) > 0) {\n  item_time_limited = T\n  item_time_limit = as.numeric(sr_time$item_time_limit)\n  item_time_left = item_time_limit\n  timeout_when_not_full_item_time = sr_time$timeout_when_not_full_item_time == \"1\"\n}\n\nresumed = F\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$CAT)) {\n  resumed = T\n\n  questions = concerto$promoted$.savedState$CAT$questions\n  theta = concerto$promoted$.savedState$CAT$theta\n  sem = concerto$promoted$.savedState$CAT$sem\n  out = concerto$promoted$.savedState$CAT$out\n  test_time_left = concerto$promoted$.savedState$CAT$test_time_left\n  item_time_left = concerto$promoted$.savedState$CAT$item_time_left\n  time_taken = concerto$promoted$.savedState$CAT$time_taken\n  correctness = concerto$promoted$.savedState$CAT$correctness\n  current_item = concerto$promoted$.savedState$CAT$current_item\n} else {\n  questions = getQuestions()\n  theta = as.numeric(starting_theta)\n  sem = 1\n  out = NULL\n  correctness = c()\n  current_item = 1\n  time_taken = 0\n}\n\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = questions[,c(\"a\",\"b\",\"c\",\"d\"),drop=F]\nparam_bank = apply(param_bank, 2, as.numeric)\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\nbuttons = \"\"\nif(!is.na(buttons_template) && !is.null(buttons_template) && buttons_template != \"\") {\n  buttons = concerto.template.join(templateId=buttons_template,params=list(label=button_label))\n}\n\nif(item_debug == \"0\" && !resumed && dim(questions)[1] > 1) { \n  #next item processor\n  if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n    current_item = concerto.test.run(next_item_processor, params=list(\n      questions=questions,\n      template_response=response,\n      theta=theta,\n      sem=sem,\n      out=out,\n      next_item_criterion=next_item_criterion,\n      scoring_method=scoring_method,\n      randomesque=randomesque,\n      cb_group=cb_group,\n      cb_control=cb_control\n    ))$next_item\n  } else {\n    current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n  }\n}\n\nwhile(T) {\n  question = as.list(questions[current_item,])\n  content = getContent(question)\n\n  time_limit = 0\n  if(test_time_limited || item_time_limited) {\n    if(test_time_limited) {\n      time_limit = test_time_left\n    }\n    if(item_time_limited && item_time_left < test_time_left) {\n      time_limit = item_time_left\n    }\n  }\n\n  updateSavedState(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken)\n  if(item_debug == \"0\") {\n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    if(!is.null(content_params_processor) && !is.na(content_params_processor) && content_params_processor != \"\") {\n      params = concerto.test.run(content_params_processor, params=list(\n        question=question,\n        params=params\n      ))$params\n    }\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params, timeLimit=time_limit)\n    warning_msg = \"\"\n\n    time_taken = time_taken + as.numeric(response$timeTaken)\n    if(test_time_limited) {\n      test_time_left = test_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") test_time_left = 0\n    }\n    if(item_time_limited) {\n      item_time_left = item_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") item_time_left = 0\n    }\n\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      correct = 0\n      if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      correctness = c(correctness, correct)\n      out = c(out, current_item)\n      param_bank_out = param_bank\n      if(dim(questions)[1] > 1) {\n        param_bank_out = param_bank[out,]\n      }\n      print(\"theta\")\n      print(param_bank_out)\n      theta <- thetaEst(matrix(param_bank_out, ncol=4, byrow=F), correctness, method=scoring_method)\n      print(\"sem\")\n      sem <- semTheta(theta, matrix(param_bank_out, ncol=4, byrow=F), correctness)\n      print(\"response\")\n      response_id=saveResponse(response, question, rb, theta, sem, correct)\n\n      #response processor\n      if(!is.null(response_processor) && !is.na(response_processor) && response_processor != \"\") {\n        concerto.test.run(response_processor, params=list(\n          question=question,\n          template_response=response,\n          response_id=response_id,\n          response_bank=rb,\n          theta=theta,\n          sem=sem,\n          correct=correct,\n          session=session\n        ))\n      }\n\n      stopReason = shouldStop(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time)\n      if(stopReason) {\n        #out of time\n        if(stopReason == 3) {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(item_time_limited) {\n          item_time_left = item_time_limit\n        }\n\n        #next item processor\n        if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n          current_item = concerto.test.run(next_item_processor, params=list(\n            questions=questions,\n            template_response=response,\n            theta=theta,\n            sem=sem,\n            out=out,\n            next_item_criterion=next_item_criterion,\n            scoring_method=scoring_method,\n            randomesque=randomesque,\n            cb_group=cb_group,\n            cb_control=cb_control\n          ))$next_item\n        } else {\n          current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n        }\n\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    \n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params)\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)\nconcerto$promoted$.savedState$CAT <<- NULL\ntime_left = 0\nif(test_time_limited) {\n  time_left = test_time_left\n}",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 107,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 8,
                    "parentVariable": 73
                },
                {
                    "class_name": "TestVariable",
                    "id": 108,
                    "name": "paragraph",
                    "type": 0,
                    "description": "<p>CAT page paragraph<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "<p>Please answer the question below:<\/p>\n",
                    "test": 8,
                    "parentVariable": 74
                },
                {
                    "class_name": "TestVariable",
                    "id": 109,
                    "name": "button_label",
                    "type": 0,
                    "description": "<p>CAT page continue button label<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "continue",
                    "test": 8,
                    "parentVariable": 75
                },
                {
                    "class_name": "TestVariable",
                    "id": 110,
                    "name": "item_bank",
                    "type": 0,
                    "description": "<p>CAT item bank definition.<\/p>\n\n<p>Leave item response options list empty for open question.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"custom_a_column\":[],\"table_type\":\"direct\",\"custom_table\":[],\"custom_question_column\":[],\"custom_response_options_column\":[],\"direct_table\":[{\"id\":\"1\",\"question\":\"10+10\",\"response_options\":[{\"value\":\"20\",\"label\":\"20\"},{\"value\":\"40\",\"label\":\"40\"}],\"a\":\"1.7\",\"b\":\"-2\",\"c\":\"0\",\"d\":\"1\",\"correct\":\"20\",\"cb_group\":\"mathematics\",\"fixed_index\":\"\"},{\"id\":\"2\",\"question\":\"100+100\",\"response_options\":[{\"value\":\"200\",\"label\":\"200\"},{\"value\":\"400\",\"label\":\"400\"}],\"a\":\"1.7\",\"b\":\"0\",\"c\":\"0\",\"d\":\"1\",\"correct\":\"200\",\"cb_group\":\"mathematics\",\"fixed_index\":\"\"},{\"id\":\"3\",\"question\":\"1000+1000\",\"response_options\":[{\"value\":\"2000\",\"label\":\"2000\"},{\"value\":\"4000\",\"label\":\"4000\"}],\"a\":\"1.7\",\"b\":\"2\",\"c\":\"0\",\"d\":\"1\",\"correct\":\"2000\",\"cb_group\":\"mathematics\",\"fixed_index\":\"\"}],\"custom_b_column\":[],\"custom_c_column\":[],\"custom_d_column\":[],\"custom_correct_column\":[],\"custom_test_id_column\":[],\"custom_cb_group_column\":[],\"data_set_id\":\"\"}",
                    "test": 8,
                    "parentVariable": 76
                },
                {
                    "class_name": "TestVariable",
                    "id": 111,
                    "name": "response_bank",
                    "type": 0,
                    "description": "<p>Response bank definition<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"table_type\":\"default\",\"custom_table\":{\"table\":\"default_cat_response_table\",\"columns\":{\"item_id\":\"item_id\",\"response\":\"response\",\"time_taken\":\"time_taken\",\"session_internal_id\":\"session_internal_id\",\"correct\":\"correct\",\"theta\":\"theta\",\"sem\":\"sem\"}},\"custom_item_id_column\":[],\"custom_response_column\":[],\"custom_time_taken_column\":[],\"custom_session_id_column\":[],\"custom_correct_column\":[],\"custom_theta_column\":[],\"custom_sem_column\":[],\"data_set_id\":\"\"}",
                    "test": 8,
                    "parentVariable": 77
                },
                {
                    "class_name": "TestVariable",
                    "id": 112,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "<p>Time-based stopping rule that will stop the test when specified amount of seconds will pass<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":{\"value\":\"0\"},\"time_limit\":\"\",\"type\":null,\"test_time_limit\":\"0\",\"item_time_limit\":\"0\",\"test_time_limit_offset\":\"0\",\"timeout_when_not_full_item_time\":\"0\"}",
                    "test": 8,
                    "parentVariable": 78
                },
                {
                    "class_name": "TestVariable",
                    "id": 113,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "<p>Item count-based stopping time that will stop the test after specified number of items is answered<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"count_limit\":\"\",\"count\":\"\"}",
                    "test": 8,
                    "parentVariable": 79
                },
                {
                    "class_name": "TestVariable",
                    "id": 114,
                    "name": "stopping_accuracy",
                    "type": 0,
                    "description": "<p>Accuracy-based stopping rule that will stop the test when at least certain accuracy is reached<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"accuracy\":\"\"}",
                    "test": 8,
                    "parentVariable": 80
                },
                {
                    "class_name": "TestVariable",
                    "id": 115,
                    "name": "scoring_method",
                    "type": 0,
                    "description": "<p>Ability estimator<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "BM",
                    "test": 8,
                    "parentVariable": 81
                },
                {
                    "class_name": "TestVariable",
                    "id": 116,
                    "name": "next_item_criterion",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "MFI",
                    "test": 8,
                    "parentVariable": 82
                },
                {
                    "class_name": "TestVariable",
                    "id": 117,
                    "name": "randomesque",
                    "type": 0,
                    "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "1",
                    "test": 8,
                    "parentVariable": 83
                },
                {
                    "class_name": "TestVariable",
                    "id": 118,
                    "name": "randomize_response_options",
                    "type": 0,
                    "description": "<p>Check if you want order of response options to be random<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "1",
                    "test": 8,
                    "parentVariable": 84
                },
                {
                    "class_name": "TestVariable",
                    "id": 119,
                    "name": "no_answer_alert",
                    "type": 0,
                    "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "No answer given!",
                    "test": 8,
                    "parentVariable": 85
                },
                {
                    "class_name": "TestVariable",
                    "id": 120,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 86
                },
                {
                    "class_name": "TestVariable",
                    "id": 121,
                    "name": "score",
                    "type": 1,
                    "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 87
                },
                {
                    "class_name": "TestVariable",
                    "id": 122,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 88
                },
                {
                    "class_name": "TestVariable",
                    "id": 123,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 8,
                    "parentVariable": 89
                },
                {
                    "class_name": "TestVariable",
                    "id": 124,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 90
                },
                {
                    "class_name": "TestVariable",
                    "id": 125,
                    "name": "cb",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"props\":[]}",
                    "test": 8,
                    "parentVariable": 91
                },
                {
                    "class_name": "TestVariable",
                    "id": 126,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "DEMO TEST",
                    "test": 8,
                    "parentVariable": 92
                },
                {
                    "class_name": "TestVariable",
                    "id": 127,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 93
                },
                {
                    "class_name": "TestVariable",
                    "id": 128,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "vertical",
                    "test": 8,
                    "parentVariable": 94
                },
                {
                    "class_name": "TestVariable",
                    "id": 129,
                    "name": "response_width",
                    "type": 0,
                    "description": "<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 95
                },
                {
                    "class_name": "TestVariable",
                    "id": 130,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 96
                },
                {
                    "class_name": "TestVariable",
                    "id": 131,
                    "name": "CAT_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "CAT_content",
                    "test": 8,
                    "parentVariable": 97
                },
                {
                    "class_name": "TestVariable",
                    "id": 132,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "test_item_debug",
                    "test": 8,
                    "parentVariable": 98
                },
                {
                    "class_name": "TestVariable",
                    "id": 133,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "buttons_single",
                    "test": 8,
                    "parentVariable": 99
                },
                {
                    "class_name": "TestVariable",
                    "id": 134,
                    "name": "response_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "",
                    "test": 8,
                    "parentVariable": 100
                },
                {
                    "class_name": "TestVariable",
                    "id": 135,
                    "name": "time_taken",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 101
                },
                {
                    "class_name": "TestVariable",
                    "id": 136,
                    "name": "time_left",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 102
                },
                {
                    "class_name": "TestVariable",
                    "id": 137,
                    "name": "test_time_limit_offset",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 8,
                    "parentVariable": 103
                },
                {
                    "class_name": "TestVariable",
                    "id": 138,
                    "name": "next_item_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "",
                    "test": 8,
                    "parentVariable": 104
                },
                {
                    "class_name": "TestVariable",
                    "id": 139,
                    "name": "content_params_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "",
                    "test": 8,
                    "parentVariable": 105
                },
                {
                    "class_name": "TestVariable",
                    "id": 140,
                    "name": "starting_theta",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 8,
                    "parentVariable": 106
                }
            ],
            "sourceWizard": 4,
            "sourceWizardName": "CAT",
            "sourceWizardTest": 7,
            "sourceWizardTestName": "source_CAT",
            "updatedOn": "2018-07-04 15:39:11",
            "updatedBy": "admin",
            "nodes": [],
            "nodesConnections": [],
            "tags": "_concerto_core",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "2bb323a50467a9cdf9a4883458f1bf396e3ca4b6"
        },
        {
            "class_name": "ViewTemplate",
            "id": 9,
            "name": "CAT_content",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".CAT-response-table {\n  border: 0 none;\n  border-collapse: separate;\n  border-spacing: 0;\n}\n.CAT-response-table td {\n  padding: 0 5px 0 0;\n}\n.CAT-response-section-horizontal {\n  float: left; \n  margin: 5px;\n  display: block;\n}\n.CAT-response-section-vertical {\n  margin: 5px;\n}\n.CAT-response-group {\n  text-align: left;\n}\n.CAT-question {\n  text-align: left;\n}\n.CAT-response-label-cell p {\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n.CAT-response-button-cell {\n  padding-right: 5px;\n}",
            "js": "testRunner.controllerProvider.register(\"cat\", function($scope) {\n  $scope.paragraph = testRunner.R.paragraph;\n  $scope.question = angular.fromJson(testRunner.R.question);\n  $scope.responsesLayout = testRunner.R.responses_layout;\n  $scope.responsesStyles = testRunner.R.response_styles;\n});",
            "html": "<div ng-controller=\"cat\">\n<div ng-bing-html=\"paragraph\">&nbsp;<\/div>\n\n<div class=\"CAT-question\" ng-bind-html=\"question.question\">&nbsp;<\/div>\n\n<div class=\"CAT-response-group\" ng-if=\"question.response_options.length &gt; 0\">\n<div ng-class=\"{'CAT-response-section-horizontal':responsesLayout=='horizontal', 'CAT-response-section-vertical':responsesLayout=='vertical'}\" ng-repeat=\"option in question.response_options track by $index\" style=\"{{response_styles}}\">\n<table class=\"CAT-response-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td class=\"CAT-response-button-cell\"><input id=\"input_response_[[$index+1]]\" name=\"response\" type=\"radio\" value=\"[[option.value]]\" \/><\/td>\n\t\t\t<td class=\"CAT-response-label-cell\"><label for=\"input_response_[[$index+1]]\" ng-bind-html=\"option.label\">&nbsp;<\/label><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<\/div>\n\n<div style=\"clear:both;\">&nbsp;<\/div>\n<\/div>\n\n<div ng-if=\"question.response_options === undefined || question.response_options.length == 0\"><input name=\"response\" style=\"width:100%;\" type=\"text\" \/><\/div>\n<\/div>\n",
            "updatedOn": "2018-07-04 15:38:52",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "3b83ae18bfd4f4415c6583311e63882b0ca769dd"
        },
        {
            "class_name": "ViewTemplate",
            "id": 10,
            "name": "test_item_debug",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": "",
            "js": "",
            "html": "<div class=\"debug\">\n<p>Current item id: #{{id}}<\/p>\n\n<p>Next item id: <input name=\"item_debug\" type=\"text\" \/><\/p>\n<\/div>\n",
            "updatedOn": "2018-07-04 15:38:52",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "55597daa2df13bf2d80f0be7acc06ea69fac2723"
        },
        {
            "class_name": "ViewTemplate",
            "id": 3,
            "name": "buttons_single",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".button-group {\n  width: 100%;\n  display: table;\n  table-layout: fixed;\n}\n.button-group ul {\n  display: table-row;\n}\n.button-group button {\n  background-color: #b9d979;\n  border: 0 none;\n  color: #000000;\n  font-family: \"Roboto\";\n  font-size: 1.1em;\n  font-style: normal;\n  font-weight: 500;\n  padding: 7px;\n  width: 150px;\n  cursor: pointer;\n}\n.button-group li {\n  display: table-cell;\n  text-align: center;\n  padding: 5px;\n}",
            "js": "",
            "html": "<div class=\"button-group\">\n<ul>\n\t<li><button name=\"button\">{{label}}<\/button><\/li>\n<\/ul>\n<\/div>\n",
            "updatedOn": "2018-07-04 15:38:52",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "5d3e8f4c88166a1e64eebbb47c49aa855b408350"
        },
        {
            "class_name": "DataTable",
            "id": 1,
            "name": "default_cat_response_table",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "columns": [
                {
                    "name": "id",
                    "type": "bigint",
                    "nullable": false
                },
                {
                    "name": "item_id",
                    "type": "bigint",
                    "nullable": false
                },
                {
                    "name": "response",
                    "type": "string",
                    "nullable": false
                },
                {
                    "name": "time_taken",
                    "type": "float",
                    "nullable": false
                },
                {
                    "name": "session_id",
                    "type": "string",
                    "nullable": false
                },
                {
                    "name": "correct",
                    "type": "boolean",
                    "nullable": false
                },
                {
                    "name": "theta",
                    "type": "float",
                    "nullable": false
                },
                {
                    "name": "sem",
                    "type": "float",
                    "nullable": false
                },
                {
                    "name": "data_set_id",
                    "type": "string",
                    "nullable": false
                }
            ],
            "updatedOn": "2018-07-04 15:38:53",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "41df317378dafe27f9003e969dcf27ab9d4860ea"
        }
    ]
}